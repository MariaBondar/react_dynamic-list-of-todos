{"version":3,"sources":["components/TodoList/TodoList.tsx","styles/api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Status","TodoList","todos","setSelectedUserId","selectedUserId","useState","query","setQuery","completed","setCompleted","filtered","Active","filter","todo","title","toLowerCase","startsWith","Completed","className","action","type","value","onChange","event","target","All","map","defaultChecked","disabled","userId","cn","onClick","id","API_URL","getUsers","a","fetch","response","json","getAll","CurrentUser","clearUser","isError","setError","currentUser","setUser","getUser","getedUser","useEffect","username","name","email","phone","App","setTodos","getData","useCallback","res","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.574775ed.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  setSelectedUserId: (arg0: number) => void,\n  selectedUserId: number,\n};\n\nenum Status {\n  Active = 'Active',\n  Completed = 'Completed',\n  All = 'All',\n}\n\nexport const TodoList: React.FC<Props>\n= ({ todos, setSelectedUserId, selectedUserId }) => {\n  const [query, setQuery] = useState('');\n  const [completed, setCompleted] = useState('');\n\n  const isFiltered = () => {\n    if (completed === Status.Active) {\n      return todos.filter(todo => (\n        todo.title.toLowerCase().startsWith(query.toLowerCase())\n        && todo.completed === false\n      ));\n    }\n\n    if (completed === Status.Completed) {\n      return todos.filter(todo => (\n        todo.title.toLowerCase().startsWith(query.toLowerCase())\n        && todo.completed === true\n      ));\n    }\n\n    return todos.filter(todo => (\n      todo.title.toLowerCase().startsWith(query.toLowerCase())\n    ));\n  };\n\n  const filtered = isFiltered();\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <form action=\"\">\n          <input\n            type=\"text\"\n            data-cy=\"filterByTitle\"\n            value={query}\n            onChange={(event) => {\n              setQuery(event.target.value);\n            }}\n          />\n          <select\n            onChange={(event) => {\n              setCompleted(event.target.value);\n            }}\n          >\n            <option value={Status.All}>All</option>\n            <option value={Status.Active}>Active</option>\n            <option value={Status.Completed}>Completed</option>\n          </select>\n        </form>\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {\n            filtered.map(todo => (\n              <li className={`TodoList__item TodoList__item--${todo.completed}`} key={todo.id}>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    defaultChecked={todo.completed}\n                    disabled\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                {todo.userId\n                  && (\n                    <button\n                      data-cy=\"userButton\"\n                      className={cn(\n                        'TodoList__user-button', 'button',\n                        {\n                          'TodoList__user-button--selected':\n                          todo.userId === selectedUserId,\n                        },\n                      )}\n                      type=\"button\"\n                      onClick={() => (\n                        setSelectedUserId(todo.userId)\n                      )}\n                    >\n                      {`User#${todo.userId}`}\n                    </button>\n                  )}\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const getUsers = async (id: number) => {\n  const response = await fetch(`${API_URL}/users/${id}`);\n\n  return response.json();\n};\n\nexport const getAll = async () => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../styles/api/api';\n\ntype Props = {\n  userId: number,\n  clearUser: () => void\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUser }) => {\n  const [isError, setError] = useState(false);\n  const [currentUser, setUser] = useState<User | null>(null);\n\n  const getUser = async () => {\n    try {\n      const getedUser = await getUsers(userId);\n\n      setError(false);\n      setUser(getedUser);\n    } catch {\n      setError(true);\n      setUser(null);\n    }\n  };\n\n  useEffect(() => {\n    getUser();\n  }, [userId]);\n\n  return (\n    <>\n      { currentUser && (\n        <div className=\"CurrentUser\" key={currentUser.id}>\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${currentUser.username}`}</span>\n          </h2>\n          <h3\n            className=\"CurrentUser__name\"\n            data-cy=\"userName\"\n          >\n            {currentUser.name}\n          </h3>\n          <p className=\"CurrentUser__email\">{currentUser.email}</p>\n          <p className=\"CurrentUser__phone\">{currentUser.phone}</p>\n          <button\n            type=\"button\"\n            className=\"button is-light CurrentUser__clear\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n      { isError && (\n        <p>Error</p>\n      )}\n\n    </>\n  );\n};\n","import React, { useState, useCallback, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAll } from './styles/api/api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const getData = useCallback(async () => {\n    const res = await getAll();\n\n    setTodos(res);\n  }, []);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const clearUser = () => {\n    setSelectedUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          setSelectedUserId={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}